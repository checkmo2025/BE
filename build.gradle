plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'checkmo'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // ============= Spring Boot 스타터 =============
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    //implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // ============= 개발 도구 =============
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    // ============= 데이터베이스 =============
    runtimeOnly 'com.mysql:mysql-connector-j'

    // ============= 테스트 =============
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    //testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // ============= 환경 변수 관리 =============
    implementation 'me.paulschwarz:spring-dotenv:4.0.0'

    // ============= JWT 인증 =============
    //implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    //runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    //runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    // ============= API 문서화 =============
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'

    // ============= QueryDSL =============
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    implementation 'com.querydsl:querydsl-core:5.1.0'
    annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
}

tasks.named('test') {
    useJUnitPlatform()
}

def generated = 'src/main/generated'

sourceSets {
    main.java.srcDirs += "$projectDir/build/generated"
}

tasks.withType(JavaCompile).configureEach {
    options.generatedSourceOutputDirectory = file(generated)
}

clean {
    delete file(generated)
}